{"version":3,"sources":["components/Header/index.tsx","utils/dataParser.ts","constants/index.ts","utils/getColour.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["HeaderWrapper","styled","header","Header","dataParser","data","ticker","map","datum","idx","Date","now","stocks","DM","colour","TV","OOH","PPC","getColour","AppWrapper","div","tickers","Object","keys","App","options","chart","zoomType","title","text","tooltip","backgroundColor","borderColor","credits","enabled","xAxis","categories","labels","format","series","name","type","gapSize","valueDecimals","fillOpacity","fillColor","linearGradient","x1","y1","x2","y2","stops","lineWidth","threshold","highcharts","Highcharts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAKaA,EAAgBC,IAAOC,OAAV,gRAiBXC,EAJmB,WAChC,OAAO,cAACH,EAAD,uC,OCnBII,EAAa,SAACC,EAAWC,GAAZ,OACvBD,EAAKC,IAAW,IAAIC,KAAI,SAACC,EAAeC,GAAhB,MAAgC,CACvDC,KAAKC,MAAc,MAANF,EACbD,OCDSI,EAAS,CACpBC,GAAI,CAAEC,OAAQ,iBACdC,GAAI,CAAED,OAAQ,cACdE,IAAK,CAAEF,OAAQ,iBACfG,IAAK,CAAEH,OAAQ,iBCFJI,EAAY,SAACZ,GAAD,aACvB,UAAAM,EAAON,UAAP,eAA2BQ,SAHA,iBCMhBK,EAAalB,IAAOmB,IAAV,gGAMjBC,EAAUC,OAAOC,KAAKlB,GAuDbmB,EArDW,WACxB,IAAMC,EAAU,CACdC,MAAO,CACLC,SAAU,KAEZC,MAAO,CACLC,KAAM,cAERC,QAAS,CACPC,gBAAiB,4BACjBC,YAAa,qBAEfC,QAAS,CACPC,SAAS,GAEXC,MAAO,CACLC,WAAY,WACZC,OAAQ,CAAEC,OAAQ,sBAEpBC,OAAQlB,EAAQd,KAAI,SAACD,GAAD,MAAa,CAC/BkC,KAAMlC,EACNmC,KAAM,OACNpC,KAAMD,EAAWC,EAAMC,GACvBoC,QAAS,EACTZ,QAAS,CACPa,cAAe,GAEjBC,YAAa,IACbC,UAAW,CACTC,eAAgB,CACdC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GAENC,MAAO,CACL,CAAC,EAAD,cAAWjC,EAAUZ,GAArB,MACA,CAAC,EAAD,eAAYY,EAAUZ,GAAtB,aAGJ8C,UAAW,IACXC,UAAW,UAIf,OACE,eAAClC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAiBmC,WAAYC,IAAY9B,QAASA,QCpDzC+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.fe68310f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport interface iHeader {}\r\n\r\nexport const HeaderWrapper = styled.header`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #282c34;\r\n  min-height: 10vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;\r\n\r\nconst Header: React.FC<iHeader> = () => {\r\n  return <HeaderWrapper>Data visualisation tool</HeaderWrapper>;\r\n};\r\n\r\nexport default Header;\r\n","export const dataParser = (data: any, ticker: string) =>\r\n  (data[ticker] || []).map((datum: number, idx: number) => [\r\n    Date.now() + idx * 86400000,\r\n    datum,\r\n  ]);\r\n","export type iTicker = \"DM\" | \"TV\" | \"OOH\" | \"PPC\";\r\n\r\nexport const stocks = {\r\n  DM: { colour: \"124, 181, 236\" },\r\n  TV: { colour: \"67, 67, 72\" },\r\n  OOH: { colour: \"144, 237, 125\" },\r\n  PPC: { colour: \"247, 163, 92\" },\r\n};\r\n","import { iTicker, stocks } from \"../constants\";\r\n\r\nexport const defaultColour = \"200, 100, 150\";\r\n\r\nexport const getColour = (ticker: string): string =>\r\n  stocks[ticker as iTicker]?.colour || defaultColour;\r\n","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Header from \"./components/Header/\";\nimport styled from \"styled-components\";\nimport data from \"./constants/data.json\";\nimport { getColour, dataParser } from \"./utils\";\n\nexport const AppWrapper = styled.div`\n  text-align: center;\n  background-color: teal;\n  height: 100vh;\n`;\n\nconst tickers = Object.keys(data);\n\nconst App: React.FC<{}> = () => {\n  const options = {\n    chart: {\n      zoomType: \"x\",\n    },\n    title: {\n      text: \"Stock data\",\n    },\n    tooltip: {\n      backgroundColor: \"rgba(169, 222, 183, 0.75)\",\n      borderColor: \"rgb(95, 186, 119)\",\n    },\n    credits: {\n      enabled: false,\n    },\n    xAxis: {\n      categories: \"datetime\",\n      labels: { format: \"{value: %Y-%m-%d}\" },\n    },\n    series: tickers.map((ticker) => ({\n      name: ticker,\n      type: \"area\",\n      data: dataParser(data, ticker),\n      gapSize: 5,\n      tooltip: {\n        valueDecimals: 2,\n      },\n      fillOpacity: 0.75,\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1,\n        },\n        stops: [\n          [0, `rgb(${getColour(ticker)})`],\n          [1, `rgba(${getColour(ticker)}, 0.1)`],\n        ],\n      },\n      lineWidth: 0.75,\n      threshold: null,\n    })),\n  };\n\n  return (\n    <AppWrapper>\n      <Header />\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}